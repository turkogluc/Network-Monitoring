/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package network_monitoring_server;

//import com.sun.xml.internal.ws.api.streaming.XMLStreamReaderFactory;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.IOException;
import java.net.SocketException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.ListModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author asafgwe
 */
public class Server_Screen extends javax.swing.JFrame {

    private final int PORT = 8888;
    private final int buttonWidth;
    private JTextArea networkContent;
    private JList clientList;
    private UDPServerListener serverListener;
    private String selected_client_ip;
    JTextArea content_of_selected_tab;

    /**
     * Creates new form Server_Screen
     */
    public Server_Screen() {
        initComponents();
        initDeviceTabbedPane();
        initResultTabbedPane();
        buttonWidth = button_discoverNetwork.getWidth();
        serverListener = new UDPServerListener(PORT);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tabbedPane_network = new javax.swing.JTabbedPane();
        button_discoverNetwork = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        inspectSelectedIP_click = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        tabbedPane_network.setBorder(null);
        tabbedPane_network.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabbedPane_networkStateChanged(evt);
            }
        });

        button_discoverNetwork.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        button_discoverNetwork.setText("Discover Network");
        button_discoverNetwork.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                button_discoverNetworkComponentMoved(evt);
            }
        });
        button_discoverNetwork.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_discoverNetworkActionPerformed(evt);
            }
        });

        jTabbedPane2.setBorder(null);
        jTabbedPane2.setToolTipText("");

        inspectSelectedIP_click.setText("INSPECT");
        inspectSelectedIP_click.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inspectSelectedIP_clickActionPerformed(evt);
            }
        });

        refreshButton.setText("REFRESH CLIENTS");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(117, 117, 117)
                .addComponent(inspectSelectedIP_click)
                .addGap(18, 18, 18)
                .addComponent(refreshButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 423, Short.MAX_VALUE)
                .addComponent(button_discoverNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 288, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane_network)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tabbedPane_network, javax.swing.GroupLayout.DEFAULT_SIZE, 489, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_discoverNetwork, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inspectSelectedIP_click)
                    .addComponent(refreshButton))
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void initDeviceTabbedPane() {
        createContent(tabbedPane_network, "Network");
        networkContent = (JTextArea) tabbedPane_network.getComponent(0);
        createTables(tabbedPane_network, "Clients");
        clientList = (JList) tabbedPane_network.getComponent(1);

    }

    private void initResultTabbedPane() {
        jTabbedPane2.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);
        createContent(jTabbedPane2, "Network Analysis for the Client");
        createContent(jTabbedPane2, "Basic Information About the Client");

    }

    private void createTables(JTabbedPane tabbedPane, String tableTitle) {
        JList table = new JList();
        //String content=createContent();
        tabbedPane.addTab(tableTitle, table);
    }

    private void createContent(JTabbedPane tabbedPane, String tableTitle) {
        JTextArea content = new JTextArea();
        content.setEditable(false);
        //String content=createContent();
        tabbedPane.addTab(tableTitle, content);
    }


    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        centeredDiscoverButton();
    }//GEN-LAST:event_formComponentResized

    private void button_discoverNetworkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_discoverNetworkActionPerformed
        networkContent.removeAll();
        button_discoverNetwork.setCursor(new Cursor(Cursor.WAIT_CURSOR));
        discoverNetwork();
        //paintTable(networkContent, Color.LIGHT_GRAY, Color.WHITE);
        findClients();
        refreshClients();
        button_discoverNetwork.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_button_discoverNetworkActionPerformed

    private void findClients() {
        serverListener.start();
    }

    private void refreshClients() {
        writeToList(clientList, serverListener.getClientList());
        //paintTable(clientList, Color.LIGHT_GRAY, Color.WHITE);
    }

    private void discoverNetwork() {
        try {
            NetDiscover netDiscover = new NetDiscover();
            writeToTextArea(networkContent, netDiscover.ScanNetwork());

        } catch (IOException ex) {
            System.err.println(ex);
        }
    }

    private void writeToList(JList table, ArrayList<String> clients) {
     
        DefaultListModel model = new DefaultListModel();
        int numberOfDevices = 0;
        for (String line : clients) {
            model.add(numberOfDevices,line);
            numberOfDevices++;
        }
        /*model.addListModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int a = 5;
                SNMPManager snmp_obj;
                try {
                    //selected_client_ip=clientList.getValueAt(clientList.getSelectedRow(),1).toString();
                    snmp_obj = new SNMPManager(selected_client_ip);
                    snmp_obj.getBasicInfo();
                } catch (IOException ex) {
                    Logger.getLogger(Server_Screen.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        });*/
        table.setModel(model);
        System.out.println("Number of Devices: " + numberOfDevices);
    }

    private void writeToTextArea(JTextArea network_text, ArrayList<String> network) {
        for (int i = 0; i < network.size(); i++) {
            network_text.append(network.get(i));
            network_text.append("\n");
        }
    }

    private void actionListenerTabbedPane2() {
        String content;
        jTabbedPane2.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                try {
                    SNMPManager snmp_obj = new SNMPManager(selected_client_ip);
                    snmp_obj.getBasicInfo();
                    //jTabbedPane2.getSelectedComponent().a
                } catch (IOException ex) {
                    Logger.getLogger(Server_Screen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

    }

    private void paintTable(JTable table, Color primaryColor, Color secondaryColor) {
        table.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                c.setBackground(row % 2 == 0 ? primaryColor : secondaryColor);
                return c;
            }
        });
    }

    private void button_discoverNetworkComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_button_discoverNetworkComponentMoved
        centeredDiscoverButton();
    }//GEN-LAST:event_button_discoverNetworkComponentMoved

    private void tabbedPane_networkStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabbedPane_networkStateChanged
        if (tabbedPane_network.getSelectedIndex() == 1) {
            refreshClients();
        }
    }//GEN-LAST:event_tabbedPane_networkStateChanged

    private void inspectSelectedIP_clickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inspectSelectedIP_clickActionPerformed
        // TODO add your handling code here:
        JList temp_list = (JList) tabbedPane_network.getComponent(1);
        selected_client_ip = temp_list.getSelectedValue().toString().split("/")[1];
        SNMPManager snmp_obj;
        
        try {
            snmp_obj = new SNMPManager(selected_client_ip);
            snmp_obj.getBasicInfo();
        } catch (IOException ex) {
            Logger.getLogger(Server_Screen.class.getName()).log(Level.SEVERE, null, ex);
        }
        
                    
    }//GEN-LAST:event_inspectSelectedIP_clickActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        // TODO add your handling code here:
        refreshClients();
    }//GEN-LAST:event_refreshButtonActionPerformed
    private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
    }

    private void centeredDiscoverButton() {
        button_discoverNetwork.setLocation((this.getWidth() - buttonWidth) / 2, (tabbedPane_network.getY() + tabbedPane_network.getHeight() + 21));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Server_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Server_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Server_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Server_Screen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Server_Screen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_discoverNetwork;
    private javax.swing.JButton inspectSelectedIP_click;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTabbedPane tabbedPane_network;
    // End of variables declaration//GEN-END:variables

    /* private String createContent(String indicator) {
        String result="";
        if(indicator.equals("basic")){
            result=
        }
        return result;
    }*/
}
